// Generated by CoffeeScript 1.6.3
var SVGDraw,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SVGDraw = (function() {
  var DrawingState, Line, State, WaitingState, _ref;

  State = (function() {
    function State(context) {
      this.context = context;
    }

    State.prototype.onMouseDown = function(e) {};

    State.prototype.onMouseUp = function(e) {};

    State.prototype.onMouseMove = function(e) {};

    State.prototype.onMouseLeave = function(e) {};

    return State;

  })();

  WaitingState = (function(_super) {
    __extends(WaitingState, _super);

    function WaitingState() {
      _ref = WaitingState.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    WaitingState.prototype.onMouseDown = function(e) {
      return this.context.status = new DrawingState(this.context);
    };

    WaitingState.prototype.onMouseMove = function(e) {
      return console.log('waiting');
    };

    return WaitingState;

  })(State);

  DrawingState = (function(_super) {
    __extends(DrawingState, _super);

    DrawingState.prototype.line_id_counter = 0;

    function DrawingState(context) {
      DrawingState.__super__.constructor.apply(this, arguments);
      this.line = new Line({
        id: ++this.line_id_counter
      });
      this.line.addPoint(this.context.getMousePosition());
      this.context.addLine(this.line);
    }

    DrawingState.prototype.onMouseMove = function(e) {
      this.line.addPoint(this.context.getMousePosition());
      return this.context.updateLine(this.line);
    };

    DrawingState.prototype.onMouseUp = function(e) {
      console.log(this.line.points);
      this.context.closeLine(this.line);
      return this.context.status = new WaitingState(this.context);
    };

    DrawingState.prototype.onMouseLeave = function(e) {
      this.context.closeLine(this.line);
      return this.context.status = new WaitingState(this.context);
    };

    return DrawingState;

  })(State);

  SVGDraw.prototype.line_color = '#000000';

  SVGDraw.prototype.line_width = 1;

  SVGDraw.prototype.background_color = 'blue';

  SVGDraw.prototype.zoom = 1;

  SVGDraw.prototype.event_listeners = {};

  SVGDraw.prototype.lines = [];

  function SVGDraw(params) {
    this.width = params.width, this.height = params.height, this.el = params.el;
    this.width || (this.width = 640);
    this.height || (this.height = 480);
    if (!this.el) {
      throw Error('el is required');
    }
    this.selection = d3.select(this.el);
    this.svg = d3.select(this.el)[0][0];
    if (this.svg.nodeName !== 'svg') {
      throw Error('el must specify a svg element.');
    }
    this.status = new WaitingState(this);
    this._initCanvas();
  }

  SVGDraw.prototype._initCanvas = function() {
    var _this = this;
    return d3.select(this.el).attr('width', "" + this.width + "px").attr('height', "" + this.height + "px").style('display', 'inline-block').style('background-color', this.background_color).on('mousedown', function(e) {
      return _this.onMouseDown(e);
    }).on('mousemove', function(e) {
      return _this.onMouseMove(e);
    }).on('mouseup', function(e) {
      return _this.onMouseUp(e);
    }).on('mouseleave', function(e) {
      return _this.onMouseLeave(e);
    });
  };

  SVGDraw.prototype.getMousePosition = function() {
    return d3.mouse(this.svg);
  };

  SVGDraw.prototype.onMouseDown = function(e) {
    return this.status.onMouseDown(e);
  };

  SVGDraw.prototype.onMouseUp = function(e) {
    return this.status.onMouseUp(e);
  };

  SVGDraw.prototype.onMouseMove = function(e) {
    return this.status.onMouseMove(e);
  };

  SVGDraw.prototype.onMouseLeave = function(e) {
    return this.status.onMouseLeave(e);
  };

  SVGDraw.prototype.setLineColor = function(line_color) {
    return this.line_color = line_color;
  };

  SVGDraw.prototype.setLineWidth = function(line_width) {
    return this.line_width = line_width;
  };

  SVGDraw.prototype.setBackgroundColor = function(background_color) {
    return this.background_color = background_color;
  };

  SVGDraw.prototype.setImage = function(image_url) {
    this.image_url = image_url;
    return this.selection.insert('image', ':first-child').attr('xlink:href', image_url).attr('width', this.width).attr('height', this.height);
  };

  SVGDraw.prototype.clearImage = function() {
    this.image_url = null;
    return this.selection.selectAll('image').remove();
  };

  SVGDraw.prototype.on = function(event, f) {
    if (!this.event_listeners[event]) {
      this.event_listeners[event] = [];
    }
    return this.event_listeners[event].push(f);
  };

  SVGDraw.prototype.off = function(event, f) {
    var idx, listeners;
    listeners = this.event_listeners[event];
    if (listeners != null) {
      idx = listeners.indexOf(f);
      if (idx >= 0) {
        return listeners.splice(idx, 1);
      }
    }
  };

  SVGDraw.prototype.addLine = function(line) {
    var data;
    this.lines.push(line);
    this.pen = d3.svg.line().interpolate('cardinal');
    data = this.pen(line.points);
    return this.current_line = this.selection.append('path').attr('data-line_id', line.id).attr('d', data).attr('fill', 'transparent').attr('stroke', line.color);
  };

  SVGDraw.prototype.updateLine = function(line) {
    var data;
    if (this.current_line && this.pen) {
      data = this.pen(line.points);
      return this.current_line.attr('d', data);
    }
  };

  SVGDraw.prototype.closeLine = function(line) {
    var data;
    if (this.current_line && this.pen) {
      data = this.pen(line.points);
      return this.current_line.attr('d', data);
    }
  };

  Line = (function() {
    Line.prototype.color = '#000000';

    Line.prototype.width = 1;

    function Line(params) {
      this.id = params.id;
      this.points = [];
      if (params.color) {
        this.color = params.color;
      }
      if (params.width) {
        this.width = params.width;
      }
    }

    Line.prototype.addPoint = function(point) {
      return this.points.push(point);
    };

    return Line;

  })();

  return SVGDraw;

})();
